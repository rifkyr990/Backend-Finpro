generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  TENANT
  STORE_ADMIN
  SUPER_ADMIN
}

enum Provider {
  GOOGLE
  FACEBOOK
  TWITTER
}

model User {
  id                      String               @id @default(uuid())
  first_name              String
  last_name               String
  email                   String               @unique
  phone                   String?
  password                String?
  role                    Role                 @default(CUSTOMER)
  is_verified             Boolean              @default(false)
  image_url               String?
  image_id                String?
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt

  socialLogins         SocialLogin[]
  verificationTokens   VerificationToken[]
  passwordResetTokens  PasswordResetToken[]
  profile              UserProfile?
  addresses            UserAddress[]
}

model SocialLogin {
  id               Int     @id @default(autoincrement())
  user_id          String
  provider         Provider
  provider_user_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  user_id    String
  token      String
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  user_id    String
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserProfile {
  id            Int     @id @default(autoincrement())
  user_id       String  @unique
  bio           String?
  date_of_birth DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserAddress {
  id           Int      @id @default(autoincrement())
  user_id      String
  name         String          // Nama penerima
  phone        String          // Nomor telepon
  label        String          // RUMAH | KANTOR
  province     String
  city         String
  district     String          // Kecamatan
  postal_code  String
  street       String          // Nama jalan
  detail       String?         // Detail alamat (opsional)
  latitude     Float?
  longitude    Float?
  is_primary   Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
