generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  STORE_ADMIN
  SUPER_ADMIN
}

enum Provider {
  GOOGLE
  FACEBOOK
  TWITTER
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model User {
  id               String @id @default(uuid())
  first_name       String
  last_name        String
  email            String   @unique
  phone            String?
  password         String?
  role             Role     @default(CUSTOMER)
  is_verified      Boolean  @default(false)
  image_url               String?
  image_id                String?
  store_id Int?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  socialLogins        SocialLogin[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]
  profile             UserProfile?
  addresses           UserAddress[]
  cart                Cart?
  orders              Order[]
  store Store? @relation(fields: [store_id], references: [id],onDelete: SetNull)
}

model SocialLogin {
  id               Int      @id @default(autoincrement())
  user_id          String
  provider         Provider
  provider_user_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  user_id    String
  token      String
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  user_id    String
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserProfile {
  id            Int       @id @default(autoincrement())
  user_id       String       @unique
  bio           String?
  date_of_birth DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserAddress {
  id           Int      @id @default(autoincrement())
  user_id      String
  name         String          // Nama penerima
  phone        String          // Nomor telepon
  label        String          // RUMAH | KANTOR
  province     String
  city         String
  district     String          // Kecamatan
  subdistrict  String?
  postal_code  String
  street       String          // Nama jalan
  detail       String?         // Detail alamat (opsional)
  latitude     Float?
  longitude    Float?
  is_primary   Boolean @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Product {
  id          Int      @id @default(autoincrement())
  category_id Int
  name        String
  description String?
  price       String
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())

  cartItems  CartItem[]
  orderItems OrderItem[]
  stocks     ProductStocks[]
  images     ProductImage[]
  category ProductCategory @relation(fields: [category_id],references: [id], onDelete: Cascade)
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  product_id Int
  image_url  String
  created_at DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model ProductStocks {
  id             Int @id @default(autoincrement())
  store_id       Int
  product_id     Int
  stock_quantity Int @default(0)

  store   Store   @relation(fields: [store_id], references: [id],onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id],onDelete: Cascade)

  @@unique([store_id, product_id])
}

model ProductCategory {
  id Int @id @default(autoincrement())
  category String
  products Product[]
}

model Store {
  id            Int      @id @default(autoincrement())
  name          String
  address       String?
  province   String?
  city       String?
  latitude      Float?
  longitude     Float?
  is_active     Boolean  @default(true)
  is_main_store Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  admins User[]
  orders Order[]
  cart   Cart[]
  stocks ProductStocks[]
}

model Cart {
  id             Int      @id @default(autoincrement())
  user_id        String      @unique
  store_id       Int
  total_quantity Int      @default(0)
  total_price    Decimal  @default(0.00)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  store     Store      @relation(fields: [store_id], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model CartItem {
  id         Int @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int @default(1)

  cart    Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id],onDelete: Cascade)

  @@unique([cart_id, product_id])
}

model Order {
  id                  Int      @id @default(autoincrement())
  user_id             String
  store_id            Int
  order_status_id     Int
  destination_address String
  latitude            Float?
  longitude           Float?
  total_price         Decimal
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user         User          @relation(fields: [user_id], references: [id],onDelete: Cascade)
  store        Store         @relation(fields: [store_id], references: [id],onDelete: Cascade)
  orderStatus  OrderStatuses @relation(fields: [order_status_id], references: [id],onDelete: Cascade)
  orderItems   OrderItem[]
  paymentProof PaymentProof?
}

model OrderStatuses {
  id     Int         @id @default(autoincrement())
  status OrderStatus @unique
  orders Order[]
}

model OrderItem {
  id                Int     @id @default(autoincrement())
  order_id          Int
  product_id        Int
  quantity          Int
  price_at_purchase Decimal

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model PaymentProof {
  id         Int      @id @default(autoincrement())
  order_id   Int      @unique
  image_url  String
  created_at DateTime @default(now())

  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)
}
