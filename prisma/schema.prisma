generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  STORE_ADMIN
  SUPER_ADMIN
}

enum Provider {
  GOOGLE
  FACEBOOK
  TWITTER
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum DiscountType {
  MANUAL
  MIN_PURCHASE
  B1G1
  FREE_ONGKIR
}

enum ReferralUsageStatus {
  PENDING
  APPLIED
  EXPIRED
}

enum StockHistoryType {
  IN
  OUT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
enum StockChangeType {
  IN 
  OUT
  ADJUSTMENT
  REMOVED
}

enum DiscountUsageStatus {
  APPLIED
  CANCELLED
}
enum ValueType {
  NOMINAL
  PERCENTAGE
}

model User {
  id                       String               @id @default(uuid())
  first_name               String
  last_name                String
  email                    String               @unique
  phone                    String?
  password                 String?
  role                     Role                 @default(CUSTOMER)
  is_verified              Boolean              @default(false)
  image_url         String?
  image_id          String?
  store_id                         Int?
  created_at               DateTime             @default(now())
  updated_at               DateTime             @updatedAt
  socialLogins             SocialLogin[]
  verificationTokens       VerificationToken[]
  passwordResetTokens      PasswordResetToken[]
  profile                  UserProfile?
  addresses                UserAddress[]
  cart                     Cart?
  orders                   Order[]
  store                    Store?               @relation(fields: [store_id], references: [id], onDelete: SetNull)
  discountUsage            DiscountUsage[]
  referrals                Referral[]
  referralUsagesAsReferrer ReferralUsage[]      @relation("Referrer")
  referralUsagesAsReferee  ReferralUsage[]      @relation("Referee")
  history StockHistory[]
  archived_stock_history ArchivedStockHistory[]

}

model SocialLogin {
  id               Int      @id @default(autoincrement())
  user_id          String
  provider         Provider
  provider_user_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  user_id    String
  token      String
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  user_id    String
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserProfile {
  id            Int       @id @default(autoincrement())
  user_id       String       @unique
  bio           String?
  date_of_birth DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserAddress {
  id          Int     @id @default(autoincrement())
  user_id     String
  name        String // Nama penerima
  phone       String // Nomor telepon
  label       String // RUMAH | KANTOR
  province    String
  city        String
  district    String // Kecamatan
  subdistrict String?
  postal_code String
  street      String // Nama jalan
  detail      String? // Detail alamat (opsional)
  latitude    Float?
  longitude   Float?
  is_primary  Boolean @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Store {
  id            Int      @id @default(autoincrement())
  name          String
  address       String?
  province      String?
  city          String?
  latitude      Float?
  longitude     Float?
  is_active     Boolean  @default(true)
  is_main_store Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  admins   User[]
  orders   Order[]
  cart     Cart[]
  stocks   ProductStocks[]
  discount Discount[]
}

model Product {
  id          Int      @id @default(autoincrement())
  category_id Int
  name        String @unique
  description String?
  price       String
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  is_deleted Boolean @default(false)

  cartItems  CartItem[]
  orderItems OrderItem[]
  stocks     ProductStocks[]
  images     ProductImage[]
  discounts Discount[]
  category ProductCategory @relation(fields: [category_id],references: [id], onDelete: Cascade)
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  product_id Int
  image_url  String
  created_at DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model ProductStocks {
  id             Int            @id @default(autoincrement())
  store_id       Int
  product_id     Int
  stock_quantity Int @default(0)
  min_stock Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  store   Store   @relation(fields: [store_id], references: [id],onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id],onDelete: Cascade)
  history StockHistory[]
  @@unique([store_id, product_id])
}
model StockHistory {
  id Int @id @default(autoincrement())
  type StockChangeType
  quantity Int
  prev_stock Int @default(0)
  updated_stock Int
  min_stock Int @default(0)
  reason String
  order_id Int?
  created_at DateTime @default(now())
  productStockId Int 
  user_id String?
  created_by User? @relation(fields: [user_id],references: [id],onDelete: Cascade)
  productStock ProductStocks @relation(fields: [productStockId],references: [id],onDelete: Cascade) 
}
model ArchivedStockHistory {
  id Int @id @default(autoincrement())
  product_id Int
  product_name String
  stock_quantity Int
  reason String
  archived_at DateTime @default(now())
  user_id String?
  created_by User? @relation(fields: [user_id],references: [id],onDelete: Cascade)
}

model ProductCategory {
  id       Int       @id @default(autoincrement())
  category String @unique
  products Product[]
  is_deleted Boolean @default(false)
}

model Cart {
  id             Int      @id @default(autoincrement())
  user_id        String      @unique
  store_id       Int
  total_quantity Int      @default(0)
  total_price    Decimal  @default(0.00)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  store     Store      @relation(fields: [store_id], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model CartItem {
  id         Int @id @default(autoincrement())
  cart_id    Int
  product_id Int
  quantity   Int @default(1)

  cart    Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id],onDelete: Cascade)

  @@unique([cart_id, product_id])
}

model Order {
  id                  Int      @id @default(autoincrement())
  user_id             String
  store_id            Int
  order_status_id     Int
  destination_address String
  latitude            Float?
  longitude           Float?
  total_price         Decimal
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
  user                User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  store               Store           @relation(fields: [store_id], references: [id], onDelete: Cascade)
  orderStatus         OrderStatuses   @relation(fields: [order_status_id], references: [id], onDelete: Cascade)
  orderItems          OrderItem[]
  payments            Payment[]
  DiscountUsage       DiscountUsage[]
}

model OrderStatuses {
  id     Int         @id @default(autoincrement())
  status OrderStatus @unique
  orders Order[]
}

model OrderItem {
  id                Int     @id @default(autoincrement())
  order_id          Int
  product_id        Int
  quantity          Int
  price_at_purchase Decimal

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id   Int    @id @default(autoincrement())
  name String
  type String

  payments Payment[]
}

model Payment {
  id                String        @id @default(uuid())
  order_id          Int
  payment_method_id Int
  amount            Decimal
  status            PaymentStatus
  transaction_id    String?
  paid_at           DateTime?
  created_at        DateTime      @default(now())

  order         Order         @relation(fields: [order_id], references: [id])
  paymentMethod PaymentMethod @relation(fields: [payment_method_id], references: [id])
  proof         PaymentProof?
}

model PaymentProof {
  id         Int      @id @default(autoincrement())
  payment_id String   @unique
  image_url  String
  created_at DateTime @default(now())

  payment Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade)
}



model Discount {
    id               Int          @id @default(autoincrement())
    name String
  product_id       Int?
  store_id         Int?
  code             String
  description      String?
  type             DiscountType
  // isFreeShipping   Boolean      @default(false)
  minPurch         Decimal?
  minQty           Int?
  freeQty          Int?
  discAmount       Decimal?
  valueType ValueType?
  // maxUsage_perUser Int?
  // maxUsage Int
  start_date DateTime
  end_date DateTime
  is_deleted Boolean @default(false)
  createdAt        DateTime     @default(now())

  product Product?        @relation(fields: [product_id], references: [id])
  store   Store?          @relation(fields: [store_id], references: [id])
  usage  DiscountUsage[]
}
model DiscountUsage {
  id          Int                 @id @default(autoincrement())
  discount_id Int
  user_id     String?
  order_id    Int?
  status      DiscountUsageStatus
  useAt       DateTime            @default(now())

  discount Discount @relation(fields: [discount_id], references: [id], onDelete: Cascade)
  user     User?     @relation(fields: [user_id], references: [id],onDelete: Cascade)
  order    Order?    @relation(fields: [order_id], references: [id],onDelete: Cascade)
}

model Referral {
  id            String   @id @default(uuid())
  user_id       String
  referral_code String   @unique
  createdAt     DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
}

model ReferralUsage {
  id            Int                 @id @default(autoincrement())
  referrer_id   String
  referee_id    String
  referral_code String
  reward_value  Decimal?
  expiredAt     DateTime?
  status        ReferralUsageStatus
  createdAt     DateTime            @default(now())

  referrer User @relation("Referrer", fields: [referrer_id], references: [id])
  referee  User @relation("Referee", fields: [referee_id], references: [id])
}
