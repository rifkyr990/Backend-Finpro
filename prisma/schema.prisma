generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  TENANT
  STORE_ADMIN
  SUPER_ADMIN
}

enum Provider {
  GOOGLE
  FACEBOOK
  TWITTER
}

enum OrderStatus {
  PENDING_PAYMENT
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum DiscountType {
  MANUAL
  MIN_PURCHASE
  B1G1
  FREE_ONGKIR
}

enum DiscountUsageStatus {
  APPLIED
  CANCELLED
}

enum ReferralUsageStatus {
  PENDING
  APPLIED
  EXPIRED
}

enum StockHistoryType {
  IN
  OUT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model User {
  id          String   @id @default(uuid())
  first_name  String
  last_name   String
  email       String   @unique
  phone       String?
  password    String?
  role        Role     @default(CUSTOMER)
  is_verified Boolean  @default(false)
  image_url   String?
  image_id    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  socialLogins             SocialLogin[]
  discountUsage            DiscountUsage[]
  verificationTokens       VerificationToken[]
  passwordResetTokens      PasswordResetToken[]
  profile                  UserProfile?
  addresses                UserAddress[]
  cart                     Cart?
  orders                   Order[]
  referrals                Referral[]
  referralUsagesAsReferrer ReferralUsage[]      @relation("Referrer")
  referralUsagesAsReferee  ReferralUsage[]      @relation("Referee")
  Admins                   Admins[]
}

model SocialLogin {
  id               Int      @id @default(autoincrement())
  user_id          String
  provider         Provider
  provider_user_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  user_id    String
  token      String
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  user_id    String
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserProfile {
  id            Int       @id @default(autoincrement())
  user_id       String    @unique
  bio           String?
  date_of_birth DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserAddress {
  id          Int     @id @default(autoincrement())
  user_id     String
  name        String // Nama penerima
  phone       String // Nomor telepon
  label       String // RUMAH | KANTOR
  province    String
  city        String
  district    String // Kecamatan
  subdistrict String?
  postal_code String
  street      String // Nama jalan
  detail      String? // Detail alamat (opsional)
  latitude    Float?
  longitude   Float?
  is_primary  Boolean @default(false)

  user          User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ShippingCosts ShippingCosts[]
}

// =============================
// Store & Product
// =============================
model Store {
  id            Int      @id @default(autoincrement())
  name          String
  address       String?
  province_id   Int?
  city_id       Int?
  latitude      Float?
  longitude     Float?
  is_active     Boolean  @default(true)
  is_main_store Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  orders        Order[]
  cart          Cart[]
  stocks        ProductStocks[]
  banners       Banners[]
  promotions    Promotions[]
  discount      Discount[]
  Admins        Admins[]
  ShippingCosts ShippingCosts[]
}

model Product {
  id          String   @id @default(uuid())
  category_id Int?
  name        String
  description String?
  price       Decimal
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())

  cartItems         CartItem[]
  orderItems        OrderItem[]
  stocks            ProductStocks[]
  images            ProductImage[]
  discounts         Discount[]
  ProductCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int?
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  product_id String
  image_url  String
  created_at DateTime @default(now())

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model ProductStocks {
  id             Int    @id @default(autoincrement())
  store_id       Int
  product_id     String
  stock_quantity Int    @default(0)

  store   Store          @relation(fields: [store_id], references: [id])
  product Product        @relation(fields: [product_id], references: [id])
  history StockHistory[]

  @@unique([store_id, product_id])
}

model StockHistory {
  id               Int              @id @default(autoincrement())
  product_stock_id Int
  type             StockHistoryType
  quantity         Int
  prevStock        Int
  newestStock      Int
  created_by       String
  created_at       DateTime         @default(now())

  productStock ProductStocks @relation(fields: [product_stock_id], references: [id])
}

// =============================
// Cart & Order
// =============================
model Cart {
  id             Int      @id @default(autoincrement())
  user_id        String   @unique
  store_id       Int
  total_quantity Int      @default(0)
  total_price    Decimal  @default(0.00)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  store     Store      @relation(fields: [store_id], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id         Int    @id @default(autoincrement())
  cart_id    Int
  product_id String
  quantity   Int    @default(1)

  cart    Cart    @relation(fields: [cart_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id])

  @@unique([cart_id, product_id])
}

model Order {
  id                  Int      @id @default(autoincrement())
  user_id             String
  store_id            Int
  order_status_id     Int
  destination_address String
  latitude            Float?
  longitude           Float?
  total_price         Decimal
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  user          User            @relation(fields: [user_id], references: [id])
  store         Store           @relation(fields: [store_id], references: [id])
  orderStatus   OrderStatuses   @relation(fields: [order_status_id], references: [id])
  orderItems    OrderItem[]
  payments      Payment[]
  DiscountUsage DiscountUsage[]
}

model OrderStatuses {
  id     Int         @id @default(autoincrement())
  status OrderStatus @unique
  orders Order[]
}

model OrderItem {
  id                Int     @id @default(autoincrement())
  order_id          Int
  product_id        String
  quantity          Int
  price_at_purchase Decimal

  order   Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product Product @relation(fields: [product_id], references: [id])
}

// =============================
// Payment
// =============================
model PaymentMethod {
  id   Int    @id @default(autoincrement())
  name String
  type String

  payments Payment[]
}

model Payment {
  id                String        @id @default(uuid())
  order_id          Int
  payment_method_id Int
  amount            Decimal
  status            PaymentStatus
  transaction_id    String?
  paid_at           DateTime?
  created_at        DateTime      @default(now())

  order         Order         @relation(fields: [order_id], references: [id])
  paymentMethod PaymentMethod @relation(fields: [payment_method_id], references: [id])
  proof         PaymentProof?
}

model PaymentProof {
  id         Int      @id @default(autoincrement())
  payment_id String   @unique
  image_url  String
  created_at DateTime @default(now())

  payment Payment @relation(fields: [payment_id], references: [id], onDelete: Cascade)
}

// =============================
// Discounts & Referrals
// =============================
model Discount {
  id               Int          @id @default(autoincrement())
  product_id       String?
  store_id         Int?
  code             String
  description      String?
  type             DiscountType
  isFreeShipping   Boolean      @default(false)
  minValue         Decimal?
  minQty           Int?
  buyQty           Int?
  freeQty          Int?
  discAmount       Decimal?
  maxUsage_perUser Int?
  expiredAt        DateTime?
  createdAt        DateTime     @default(now())

  product Product?        @relation(fields: [product_id], references: [id])
  store   Store?          @relation(fields: [store_id], references: [id])
  usages  DiscountUsage[]
}

model DiscountUsage {
  id          Int                 @id @default(autoincrement())
  discount_id Int
  user_id     String
  order_id    Int
  status      DiscountUsageStatus
  useAt       DateTime            @default(now())

  discount Discount @relation(fields: [discount_id], references: [id])
  user     User     @relation(fields: [user_id], references: [id])
  order    Order    @relation(fields: [order_id], references: [id])
}

model Referral {
  id            String   @id @default(uuid())
  user_id       String
  referral_code String   @unique
  createdAt     DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
}

model ReferralUsage {
  id            Int                 @id @default(autoincrement())
  referrer_id   String
  referee_id    String
  referral_code String
  reward_value  Decimal?
  expiredAt     DateTime?
  status        ReferralUsageStatus
  createdAt     DateTime            @default(now())

  referrer User @relation("Referrer", fields: [referrer_id], references: [id])
  referee  User @relation("Referee", fields: [referee_id], references: [id])
}

// =============================
// Misc Tables
// =============================
model ProductCategory {
  id       Int       @id @default(autoincrement())
  category String
  products Product[]
}

model Admins {
  id       String @id @default(uuid())
  user_id  String
  store_id Int

  user  User  @relation(fields: [user_id], references: [id])
  store Store @relation(fields: [store_id], references: [id])
}

model City {
  id          Int    @id @default(autoincrement())
  province_id Int
  name_city   String

  province Province @relation(fields: [province_id], references: [id])
}

model Province {
  id     Int    @id @default(autoincrement())
  cities City[]
}

model Promotions {
  id          String   @id @default(uuid())
  store_id    Int
  title       String
  description String?
  banner_url  String?
  start_date  DateTime
  end_date    DateTime
  is_active   Boolean  @default(true)

  store Store @relation(fields: [store_id], references: [id])
}

model Banners {
  id           Int     @id @default(autoincrement())
  store_id     Int
  image_url    String
  caption      String?
  link         String?
  order_number Int?

  store Store @relation(fields: [store_id], references: [id])
}

model ShippingCosts {
  id              Int      @id @default(autoincrement())
  store_id        Int
  user_address_id Int
  courier         String
  service_type    String
  estimation      String?
  cost            Decimal
  created_at      DateTime @default(now())

  store       Store       @relation(fields: [store_id], references: [id])
  userAddress UserAddress @relation(fields: [user_address_id], references: [id])
}
