// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  TENANT
  STORE_ADMIN
  SUPER_ADMIN
}

enum Provider {
  GOOGLE
  FACEBOOK
  TWITTER
}

model User {
  id                      Int                  @id @default(autoincrement())
  first_name              String
  last_name               String
  email                   String               @unique
  phone                   String?
  password                String?
  role                    Role                 @default(CUSTOMER)
  is_verified             Boolean              @default(false)
  image_url               String?
  imageUrlPublicId        String?
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt

  socialLogins         SocialLogin[]
  verificationTokens   VerificationToken[]
  passwordResetTokens  PasswordResetToken[]
  profile              UserProfile?
  addresses            UserAddress[]
}

model SocialLogin {
  id               Int     @id @default(autoincrement())
  user_id          Int
  provider         Provider
  provider_user_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserProfile {
  id            Int     @id @default(autoincrement())
  user_id       Int     @unique
  bio           String?
  date_of_birth DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model UserAddress {
  id           Int     @id @default(autoincrement())
  user_id      Int
  label        String
  address_line String
  city         String
  province     String
  postal_code  String
  latitude     Float?
  longitude    Float?
  is_primary   Boolean  @default(false)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}